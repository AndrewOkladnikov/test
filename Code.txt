package _rcp;

import java.awt.event.ActionListener;
import java.sql.*;
//Import java.sql.postgresql-42.3.2;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.*;

import javax.inject.Inject;

import org.eclipse.jface.viewers.ArrayContentProvider;
import org.eclipse.jface.viewers.ColumnLabelProvider;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.TableViewerColumn;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.MouseListener;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.ISharedImages;
import org.eclipse.ui.IWorkbench;
import org.eclipse.ui.part.ViewPart;

public class View extends ViewPart {
	public static final String ID = "1_.view";
	public Button bt1 ;
	public Label lb1 ;
	Connection conn;
	Statement statement = null;
	ResultSet rs;
	String resultStr = "";
	List<String> lst = new ArrayList<String>();
	List<String> mst = new ArrayList<String>();
	//String url = "jdbc:postgresql://localhost:5432/test_db","postgres", "kirs1510";
	String createTableSQL = "CREATE TABLE DBUSER("
			+ "USER_ID NUMERIC(5) NOT NULL, "
			+ "USERNAME VARCHAR(20) NOT NULL, "
			+ "CREATED_BY VARCHAR(20) NOT NULL, "
			+ "CREATED_DATE DATE NOT NULL, " + "PRIMARY KEY (USER_ID) "
			+ ")";
	String selectTableSQL = "SELECT * FROM public.\"Books\"\n"
			+  "ORDER BY book_id ASC ";
	Text txt1;
	Logic logic = new Logic(this);
	@Inject IWorkbench workbench;
	
	private TableViewer viewer;
	
	private class StringLabelProvider1 extends ColumnLabelProvider {
		
		// getText method is used from super class ColumnLabelProvider

		@Override
		public Image getImage(Object obj) {
			return workbench.getSharedImages().getImage(ISharedImages.IMG_OBJ_ELEMENT);
		}

	}

	@Override
	public void createPartControl(Composite parent) {
		String re = parent.getLayout().toString();
		System.out.println(re);
		try{
		    Class.forName("org.postgresql.Driver");
		    } catch (ClassNotFoundException cnfe){
		      System.out.println("Could not find the JDBC driver!");
		      //System.exit(1);
		    }
		//url = "jdbc:postgresql://localhost:5432/test_db","postgres", "kirs1510";
		//String url = "jdbc:postgresql://localhost:5432/test_db?user=postgres&password=kirs1510"; 
		try {
			conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/test_db","postgres", "kirs1510");
			System.out.println("Соединение прошло успешно!");
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			//e.printStackTrace();
		}
		try {
			statement = conn.createStatement();
			rs = statement.executeQuery(selectTableSQL);
			while (rs.next()) {
				lst.add(rs.getString("BOOK_ID"));
				lst.add(rs.getString("BOOK_NAME"));
				lst.add(rs.getString("AUTHOR"));
				lst.add(rs.getString("ISSUE_YEAR"));
				for(String str:  lst) {
					resultStr += str +" | ";
				System.out.print(str +" | ");
				//System.out.println("");
				}//System.out.println("username : " + username);
				System.out.println("");
				mst.add(resultStr);
				resultStr = "";
				lst.clear();
			}
			System.out.println("Table \"dbuser\" is created!");
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			//e.printStackTrace();
			System.out.println(e.getMessage());
		}
		GridLayout grid = new GridLayout(3, false);
		parent.setLayout(grid);
		bt1 = new Button(parent, SWT.PUSH);
		bt1.setText("Hello!!!");
		//bt1.setBounds(100,120,90,70);
		bt1.addMouseListener((MouseListener) logic);
		lb1 = new Label(parent, SWT.BORDER|SWT.CENTER|SWT.FILL);
		lb1.setText("                                                               ");
		//bt1.addSelectionListener(SelectionListener.widgetSelectedAdapter(e-> lb1.setText("Кнопка нажата!")));
		//
		viewer = new TableViewer(parent, SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);
		viewer.getTable().setLinesVisible(false);

		TableViewerColumn column = new TableViewerColumn(viewer, SWT.NONE);
		column.setLabelProvider(new StringLabelProvider1());

		viewer.getTable().getColumn(0).setWidth(600);
		
		viewer.setContentProvider(ArrayContentProvider.getInstance());
		
		// Provide the input to the ContentProvider
		viewer.setInput(mst);
	}


	@Override
	public void setFocus() {
		viewer.getControl().setFocus();
	}
	
	private List<String> createInitialDataModel() {
		return Arrays.asList("One", "Two", "Three");
	}
}
---------------------------------------------------------------------------------------------------------------------------------
package rcp;


import java.awt.TextArea;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.*;
import javax.inject.Inject;

import org.eclipse.e4.core.contexts.IEclipseContext;
import org.eclipse.e4.core.di.annotations.Execute;
import org.eclipse.jface.viewers.ArrayContentProvider;
import org.eclipse.jface.viewers.ColumnLabelProvider;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.TableViewerColumn;
import org.eclipse.jface.widgets.WidgetFactory;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.layout.RowData;
import org.eclipse.swt.layout.RowLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Layout;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.ISharedImages;
import org.eclipse.ui.IWorkbench;
import org.eclipse.ui.part.ViewPart;

import static org.eclipse.swt.events.SelectionListener.*;

public class View extends ViewPart {
	public static final String ID = "1.rcp.view";
	//JDBCPostgreSQLConnect
	@Inject IWorkbench workbench;
	@Inject Display display;
	
	private TableViewer viewer;
	
	private class StringLabelProvider extends ColumnLabelProvider {
		
		// getText method is used from super class ColumnLabelProvider

		@Override
		public Image getImage(Object obj) {
			return workbench.getSharedImages().getImage(ISharedImages.IMG_OBJ_ELEMENT);
		}

	}
	
	public class ShowMapHandler {
	    @Execute
	    public void execute(IEclipseContext context) {
	        // add objects to the active local context injected into
	        // this handler
	        // ...
	    }

	}

	@Override
	public void createPartControl(Composite parent) {
		
			Shell shell = new Shell (display);
		shell.setText("Snippet 108");
		Label label = new Label (shell, SWT.NONE);
		label.setText ("Enter your name:");
		Text text2 = new Text (shell, SWT.BORDER);
		text2.setLayoutData (new RowData (100, SWT.DEFAULT));
		Button ok = new Button (shell, SWT.PUSH);
		ok.setText ("OK");
		ok.addSelectionListener(widgetSelectedAdapter(e -> System.out.println("OK")));
		Button cancel = new Button (shell, SWT.PUSH);
		cancel.setText ("Cancel");
		cancel.addSelectionListener(widgetSelectedAdapter(e -> System.out.println("Cancel")));
		shell.setDefaultButton (cancel);
		shell.setLayout (new RowLayout ());
		shell.pack ();
		shell.open ();
		while (!shell.isDisposed ()) {
			if (!display.readAndDispatch ()) display.sleep ();
		}
		
		try {
			Class.forName("org.postgresql.Driver");
		} catch (ClassNotFoundException e2) {
			System.out.println("Драйвер не найден");
			//e2.printStackTrace();
		}
		System.out.println("Драйвер найден");
		
		try {
			Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres","postgres", "1510kirs");
			System.out.println("Success connection");
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		GridLayout layout = new GridLayout();
		GridLayout grid = new GridLayout();
		
		RowLayout rowl = new RowLayout();
		rowl.marginLeft = 10;
		rowl.marginTop = 10;
		rowl.spacing = 15;
		layout.numColumns = 3;
		parent.setLayout(layout);
		new Label(parent, SWT.NONE).setText("Введите ФИО через пробел");
		Text multiText = new Text(parent,SWT.NONE|SWT.MULTI|SWT.V_SCROLL|SWT.WRAP);
		//multiText.setLayoutData(new GridData(250, 80));  
		//multiText.setLayoutData(new GridData(SWT.FILL, SWT.BEGINNING, true, false));
		multiText.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
		multiText.setText("\n\n\n");
		//multiText.setEditable(true);
		Text text = new Text(parent, SWT.BORDER);
		//text.setSelection(15);
		text.setText("Ура!!!  Строка ввода!!!");
		text.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
		Button b1 = new Button(parent, SWT.PUSH);
		b1.setText("Press me");
		
		viewer = new TableViewer(parent, SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);
		viewer.getTable().setLinesVisible(true);
		Button b2 = new Button(parent, SWT.PUSH);
		b2.setText("Нажми меня");
		WidgetFactory.button(SWT.PUSH).text("Press me").onSelect(e-> text.setText("Другая кнопка нажата!!!")).create(parent);
		WidgetFactory.button(SWT.PUSH).text("Press me").onSelect(e-> multiText.setText("Ещё одна кнопка нажата!!!")).create(parent);
		TableViewerColumn column = new TableViewerColumn(viewer, SWT.NONE);
		column.setLabelProvider(new StringLabelProvider());

		viewer.getTable().getColumn(0).setWidth(200);
		
		viewer.setContentProvider(ArrayContentProvider.getInstance());
		
		// Provide the input to the ContentProvider
		viewer.setInput(createInitialDataModel());
	}


	@Override
	public void setFocus() {
		viewer.getControl().setFocus();
	}
	
	private List<String> createInitialDataModel() {
		return Arrays.asList("One", "Two", "Three");
	}
}